//------------------------------------------------------------------------------

	#pragma hdrstop

//---------------------------------Librerias------------------------------------

	#include <iostream>
	#include <stdio.h>
	#include <conio.h>
	#include <string>
	#include <cstdlib>
	#include <fstream>
	#include <windows.h>
	#include "JugadoresFichasLD.h"
	#include "Metodos.h"
	using namespace std;

//------------------------------------------------------------------------------

	#pragma package(smart_init)

//---------------------------------Métodos--------------------------------------

	void InsertarInicioLDJ(ListaLDJ &Cabeza, ListaLDJ &Cola, string Letra , int Punteo)
	{
		 ListaLDJ aux = new(struct FichasJugadores);
		 aux -> Letra = Letra;
		 aux -> Punteo = Punteo;

		 aux -> sgte = Cabeza;
		 aux -> ante = NULL;
		 if(Cabeza != NULL)
		 {
			 Cabeza -> ante = aux;
		 }
		 Cabeza = aux;
	}

	void InsertarFinalLDJ(ListaLDJ &Cabeza, ListaLDJ &Cola, string Letra, int Punteo)
	{
		ListaLDJ aux = new(struct FichasJugadores);
		aux -> Letra = Letra;
		aux -> Punteo = Punteo;
		aux -> sgte = NULL;
		aux -> ante = NULL;

		if(Cabeza == NULL)
		{
			Cabeza = aux;
			Cola = aux;
		}
		else
		{
			Cola -> sgte = aux;
			aux -> ante = Cola;
			Cola = aux;
		}
	}

	bool EstaVaciaLDJ(ListaLDJ &Lista)
	{
		if(Lista == NULL)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	int CantidadLDJ(ListaLDJ &Lista)
	{
		int Cant = 0;

		if(!EstaVaciaLDJ(Lista))
		{
			ListaLDJ aux = Lista;
			do
			{
				Cant++;
				aux = aux -> sgte;
			}
			while(aux != NULL);
		}
		return Cant;
	}

	void InsertarEnMedioLDJ(ListaLDJ &Cabeza, ListaLDJ &Cola, string Letra, int Punteo, int Posicion)
	{
		ListaLDJ aux = new(struct FichasJugadores);
		aux -> Letra = Letra;
		aux -> Punteo = Punteo;
		aux -> sgte = NULL;
		aux -> ante = NULL;

		Posicion = Posicion - 1;

		if(Cabeza == NULL)
		{
			return;
		}
		if(Posicion == 0)
		{
			Cabeza -> ante = aux;
			aux -> sgte = Cabeza;
			aux -> ante = NULL;
			Cabeza = aux;
		}
		else
		{
			ListaLDJ Temp = Cabeza;

			for(int i = 0; i < Posicion - 1; i++)
			{
				Temp = Temp -> sgte;

				if(Temp == NULL)
				{
				   return;
				}
			}
		   if(Temp -> sgte != NULL)
		   {
			   Temp -> sgte -> ante = aux;
			   aux -> sgte = Temp -> sgte;
			   aux -> ante = Temp;
			   Temp -> sgte = aux;
		   }
		   else
		   {
			   Temp -> sgte = aux;
			   aux -> ante = Temp;
		   }
		}
	}

	void EliminarLDJ(ListaLDJ &Cabeza, ListaLDJ &Cola, int Posicion)
	{
		if(CantidadLDJ(Cabeza) != 0)
		{
			if(Posicion <= CantidadLDJ(Cabeza))
			{
				if(Posicion == 1)
				{
					if(CantidadLDJ(Cabeza) == 1)
					{
						delete(Cabeza);
						Cabeza = NULL;
					}
					else
					{
						ListaLDJ Borrar = Cabeza;
						ListaLDJ Ultimo = Cabeza -> ante;
						Cabeza = Cabeza -> sgte;
						Ultimo -> sgte = Cabeza;
						Cabeza -> ante = Ultimo;
						delete(Borrar);
					}
				}
				else
				{
					ListaLDJ aux = Cabeza;
					for(int i = 1; i <= Posicion - 1; i++)
					{
						aux = aux -> sgte;
					}
					ListaLDJ Borrar = aux;
					ListaLDJ Anterior = aux -> ante;
					aux = aux -> sgte;
					Anterior -> sgte = aux;
					aux -> ante = Anterior;
					delete(Borrar);
				}
			}
			else
			{
				cout<< "La Valor Indicado No Existe En La Lista" << endl;
				system("pause > 0");
			}
		}
		else
		{
			cout<< "Lista Vacia" << endl;
            system("pause > 0");
		}
	}
